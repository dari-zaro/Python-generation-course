ПРОГРАММИРОВАНИЕ НА ПИТОНЕ – ТЕОРИЯ

Пайтон- это интерпретатор. Специальная программа, которая интерпретирует или выполняет по шагам другие программы.

Пайтон задает определённые правила, согласно которым составляются программы, и как они исполняются.

Программы для Пайтон представляют из себя последовательность шагов/команд для компьютера, которые написаны с учетом правил языка Пайтон.

Примерно это выглядит так: программа производит какие-то манипуляции с данными и в конце выводит результат.

Писать программу можно в любом текстовом редакторе, но все же есть специальные блокноты для написания программ.

Команда «выполнить» – win+r

Писать код можно в IDOL piton. Можно и через консоль, которую можно вызвать через команду «выполнить» или просто найдя ее в поиске.

Pip- инсталлятор пакетов Пайтон.
Это, своего рода, команда для скачивания какого-то дополнительного софта для работы с Пайтон. Чтобы применить это, напиши команду « pip install и что конкретно установить». Пакет начнет скачиваться, если все было написано правильно, безо всяких инсталлеров и поиска программы в браузере.

Для работы на курсе я установила Jupiter– это удобная среда для работы с кодами написанными на питоне. Он открывается в браузере, как Стейбл дифьюжн, открыть можно через командную строку через команду: jupyter lab.

Для работы с кодом нужно в открывшемся приложении создать не текстовый док, а notebook и работать в этом документе.

Питон производит стандартные вычислительные операции с использованием стандартных обозначений: +, -,*, /. 
Деление обозначается двумя наклонными чертами: // , и выведет питон только целое число, без остатка.
Если мне нужен в результате именно остаток, то я вместо умножения пишу знак процента: %. Питон выведет мне только остаток от деления, без целого числа.

Чтобы число возвести в степень поставь две звездочки: **

Все это бинарные операции, т.е. операции, где есть левый оперант и правый. БюджетЕсть и унарные операции– операции всего с одной переменной, например -3.

Если в коде возникает ошибка «sintaxError», значит ты нарушила правила синтаксиса в пайтон. В ошибке обязательно указывается номер строки, где произошла ошибка, там и ищи свой косяк.

Бывают ошибки, когда синтаксически все верно, но все равно возникает кает ошибка. Связано это с математическими правилами. Например, в выражении: 5//0 возникнет ошибка, потому что на ноль делить нельзя.

Какие бывают числа:
1)	Натуральные числа – те, которые можно использовать реальные что-то считая.
2)	Целые числа – просто... Целые числа, без остатка и дробности. Грубо говоря: натуральные+отрицательные.
3)	Рациональные – числа в виде дроби, которые все же делятся.
4)	Иррациональные – числа в виде дроби, но неделимые. Те, у которых бесконечное множество цифр после запятой.
5)	Действительные/вещественные – хрень какая-то
6)	Комплексные – тоже хрень непонятная

0.5 = 5е-1,
е=10 (Не задавай вопросов, просто запомни это)
Получается: 5*10**-1 (десять в степени -1)

Во, ща еще раз о числах:
1)	Целые числа – int
2)	Вещественные (с плавающей точкой) – float
3)	Логические – bool

Строки – str

Числам входные данные для языка являются объектами и делятся на вышеперечисленные типы. 

Типы объектов можно изменять.

Например, если мы хотим сделать число 2.3 целым, мы можем записать это как int(2.3). 

Или если хотим преобразовать целое число в нецелое. Например, 5 хотим записать, как число с плавающей точкой, тогда записываем float(5) и на выходе получим 5.0

Тип объекта можно узнать с помощью функции type, например, я хочу узнать тип объекта 7, тогда я записываю type(7), результат будет int.


Переменные

Задать переменную– дать объекту имя.
Как это сделать. 
Например, я хочу ввести переменную для решения уравнения с определенным значением, например, 3, тогда я просто в новостройке пишу: x=3. Все, переменная x введена. Для обозначения переменной можно использовать любую букву латиницы.

Любая переменная должна быть проанализирована перед использованием. Т.е. я не могу ни с того ни с сего сразу ввести переменную уравнение. В коде обязательно сначала нужно указать значение переменной, как я написала выше.
Оператор присваивания = (знак равенства)
Нельзя написать 2=a. Будет ошибка. Имя переменной должно быть слева от оператора присваивания.

Еще есть оператор приращения– перед = ставится любой знак вычисления. Например:
a=2
a += 3, это интерпретируется как: a= a+3
Варианты:
+=,-=,*=,/=,//=, %=,**=.
Ограничения для имени переменной:
1)	Может состоять из букв (строчных и простых)
2)	Должно начинаться с буквы или подчеркивания.
3)	Не должно являться ключевым словом (обозначением какой-то операции в пайтоне)
4)	Регистр букв имеет значение ( переменные a и A не одно и то же).

Динамическая типизация – когда впеременная в коде меняет свой тип. В других языках программирования у переменной должен быть, зафиксированный тип, но в пайтон тип переменной модет меняться от строки к строке.

Print ()- вывести информацию на экран.
Input ()– читает строку с клавиатуры. 
То есть, если в коде встречается команда input, значит втот момент программа останавливается и ждет когда пользователь что-нибудь нажмет.
Если мы хотим добавить текст он всегда должен быть в кавычках, например 
print ( ''hello, world!'')

Для оператора input можно задать пригласительное сообщение, например
input (''введите данные'') – тогда пользователю высветится сообщение, а программа остановится и будет ждать реакции пользователя.

Чтобы сохранить данные которые ввел пользователь необходимо ввести переменную, выглядить это будет так:
s = input (), т.е. присвоить переменной s значение, которое ввел пользователь.
Часто необходимо то, что ввел пользователь, преобразовать в число. Для этого необходимо использовать те трассировки в тип, о которых говорилось ранее. Например мне нужно, чтобы то значение, которое ввел пользователь, было преобразовано в целое число, выглядить код будет так:
a = int(input())

Функция print может вывести на экран несколько значений, для этого их нужно указать через запятую, например print(a, b, c)

Когда записываешь фразу кавычки должны стоять к фразе вплотную, без пробелов. То же самое если на конце фразы какой-то знак.


ЛОГИЧЕСКИЕ ОПЕРАЦИИ

Имеется всего два логических значения:
False (0) - ложь
True (1) – истина

Существуют три основные операции с логическими значениями: or (или), and (и), not (не).
x or y (одна из переменных является истиной)
x and y  (только если обе переменные истины)
not x/not y (взять обратное значение. Если была ложь, то будет истина, если была истина, то будет ложь).

Чаще всего логические значения возникают из сравнения чисел. Какие есть операции сравнения:
< строго меньше
<= меньше или равно
> строго больше 
>= больше или равно
== равно
!= не равно

Например, если я введу утверждение 5<7, пайтон выдаст ответ true. Если я введу 5==2+3 ответ так же будет true

У логических операций есть приоритетность. 
В первую очередь вычисляется not,  дальше and и последнее or
Логические операции всегда пишутся с большой буквы. Напишешь с маленькой – нифига не сработает.

УСЛОВИЯ

К условиям относятся if, else, elif.

Стандартная конструкция это если-то, т.е. if-else

В коде сначала задаем if – какое-то утверждение или сравнение. Ниже то, что должно произойти если параметр соответствует. А потом else– что произойдет, если параметр не соответствует утверждению в if.

Утверждение под if, else, elif пишутся с отступом– 4 пробела.
В Юпитере перейди на новую строку и нажми Таб. Тебя сразу же перекинет на 4 пробела вперед.

life сокращение от else + if, лол
Короче, конструкция выглядит так:

if условие_1
     Блок действий/набор инструкций (если условие оказалось верным)
Можно написать еще одно условие:
life условие_2
      Второй блок.
Если первое условие неверно, проверяется следующее с elif. Таких эльфов может быть сколько угодно и все они будут последовательно проверяться. Если одно из этих множества условий выполнилось, все последующие больше не будут проверяться.
else:
-	Блок 3.
Else выполнится в том случае если ни одно из условий не оказалось верным.

Эта конструкция модет изменяться в зависимости от задачи. Можно писать без elif, или без else. 

Вот ответ, почему при вводе значения необходимо добавлять int или другое обозначение числа – без этого введенные данные будут иметь формат строки, а со строкой код не может производить вычисления, ее нужно обозначить как цифру, что и делает int.

СТРОКИ

Строки в пайтон, это просто последовательность различных символов. Записать строку можно по-разному.
-	Одинарные кавычки.
-	Двойные кавычки (разницы с одинарными кавычками ваще нет)
-	Три кавычки.
-	Три двойных кавычки (хз зачем такие длинные. Сказали, что для очень больших объемов инфы в строке).

Над строками можно производить вычислительные операции:
-	Cложение (все просто объединится и структуризируется)
-	Умножить в n раз (строка повторится n раз)
-	len('abcd')  – подсчет кол-ва символов в строке. Здесь вывод будет 4.

Строки можно сравнивать:
-	'abc'=='''abc''' (Результат True. Здесь используются разные кавычки, но это ваще ни на что не влияет)
-	'abc'<'ac' (Строка считается больше, если с точки зрения лексики буква идет раньше. Например, b>c, так как в алфавите идет раньше)
-	'abc'>'ab' (Сравнивается также и кол-во символов в строке. Если строка закончилась раньше, то она меньше)

'\n'– символ перевода строк (Отстойная формулировка. Этот символ переносит на новую строку то, что будет после \n. Короче, \n обозначает новую строку)

Можно писать сразу же несколько \n. Сколько их будет, на столько строк и опустится то, что будет в строке после них.

Пример: 'line\n line'

print('привет', '\n\n\n', 'Андрей')

#- это комментарий
Пример:
X=5 # (дальше пишем комментарий, после знака # программа инфу воспринимать не будет)

Можно использовать многострочный комментарий. По сути, это просто строки. Для этого и используются три одинарные, или три двойные кавычки.

При выводе через print нескольких параметров через запятую они будут разделены пробелом. Если выводить параметры через сложение, то они, ожидаемо, сольются и строки не будут разделены пробелом.
